pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS_ID = '1'
        TF_DIR = 'terraform'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                echo "Checking out Terraform code from private repository..."
                checkout scm
            }
        }

        stage('Terraform Actions') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: env.AWS_CREDENTIALS_ID,
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    withEnv(["AWS_REGION=${env.AWS_REGION}"]) {
                        dir(env.TF_DIR) {
                            script {
                                echo "Running Terraform Init..."
                                sh 'terraform init -input=false'

                                echo "Running Terraform Plan..."
                                sh 'terraform plan -out=tfplan -input=false'
                            }
                        }
                    }
                }
            }
        }

        stage('Confirm Apply') {
            steps {
                input "Apply Terraform plan to create/update ECS Cluster?"
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: env.AWS_CREDENTIALS_ID,
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    withEnv(["AWS_REGION=${env.AWS_REGION}"]) {
                        dir(env.TF_DIR) {
                            echo "Running Terraform Apply..."
                            sh 'terraform apply -auto-approve tfplan'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished. Cleaning workspace.'
            cleanWs()
        }
    }
}
